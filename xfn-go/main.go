package main

import (
	"context"
	"os"

	iov1alpha1 "github.com/crossplane/crossplane/apis/apiextensions/fn/io/v1alpha1"

	function "github.com/negz/xfns/xfn-go/sdk"
)

// main is the entrypoint for our function. It is auto-generated by `up fn
// scaffold --language Go` and is (by default) the same for every Composition
// Function written with the Go SDK.
func main() {
	fnio, err := function.ReadIO()
	if err != nil {
		// If we can't read our FunctionIO, try write a fatal result.
		fnio = &iov1alpha1.FunctionIO{}
		function.Fatal(fnio, err)
	}

	// Invoke our function. This mutates the FunctionIO.
	err = Function(context.Background(), fnio)
	if err != nil {
		function.Fatal(fnio, err)
	}

	// If we can't write our FunctionIO, 'hard fail' the function invocation and
	// write the error to stderr so Crossplane can surface it.
	if err := function.WriteIO(fnio); err != nil {
		os.Stderr.WriteString(err.Error())
		os.Exit(1)
	}
}
